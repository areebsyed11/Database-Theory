-- QUESTION # 2

-- (1)

CREATE TABLE Members (
    MemberID    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Name        VARCHAR2(50) NOT NULL,
    Email       VARCHAR2(50) NOT NULL UNIQUE,
    JoinDate    DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT chk_email_format CHECK (INSTR(Email, '@') > 1)
);

CREATE TABLE Books (
    BookID          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Title           VARCHAR2(300) NOT NULL,
    Author          VARCHAR2(200) NOT NULL,
    CopiesAvailable NUMBER DEFAULT 1 NOT NULL,
    CONSTRAINT chk_copies_nonnegative CHECK (CopiesAvailable >= 0)
);

CREATE TABLE IssuedBooks (
    IssueID    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    MemberID   NUMBER NOT NULL,
    BookID     NUMBER NOT NULL,
    IssueDate  DATE DEFAULT SYSDATE NOT NULL,
    ReturnDate DATE,
    CONSTRAINT chk_dates CHECK (ReturnDate IS NULL OR ReturnDate >= IssueDate),
    CONSTRAINT fk_issue_member FOREIGN KEY (MemberID) REFERENCES Members(MemberID),
    CONSTRAINT fk_issue_book   FOREIGN KEY (BookID) REFERENCES Books(BookID)
);


-- (3)
  -- (a)
-- Members
INSERT INTO Members (Name, Email) VALUES ('Syed Areeb', 'areeb.syd@example.com');
INSERT INTO Members (Name, Email) VALUES ('Aman Ullah', 'aman@example.com');
INSERT INTO Members (Name, Email) VALUES ('Hamza Ali', 'hamza.ali@example.com');

-- Books
INSERT INTO Books (Title, Author, CopiesAvailable) VALUES ('Sapiens', 'Yuval Noah Hrari', 3);
INSERT INTO Books (Title, Author, CopiesAvailable) VALUES ('The great gatsby', 'F. Scott Fitzgerald', 2);
INSERT INTO Books (Title, Author, CopiesAvailable) VALUES ('Let us C', 'Yashavant Kanetkar', 1);

  -- (b)
UPDATE Books
SET CopiesAvailable = CopiesAvailable - 1
WHERE BookID = 1 AND CopiesAvailable > 0;


INSERT INTO IssuedBooks (MemberID, BookID)
VALUES (1, 1);

  -- (c)
SELECT m.MemberID,
       m.Name      AS MemberName,
       m.Email,
       b.BookID,
       b.Title     AS BookTitle,
       i.IssueDate,
       i.ReturnDate
FROM Members m
JOIN IssuedBooks i ON m.MemberID = i.MemberID
JOIN Books b ON i.BookID = b.BookID
ORDER BY m.MemberID, i.IssueDate;


-- (4) 
  -- (a)
INSERT INTO Members (MemberID, Name, Email)
VALUES (1, 'Duplicate User', 'dup@example.com');

  -- (b)
INSERT INTO IssuedBooks (MemberID, BookID)
VALUES (999, 1);

  -- (c)
INSERT INTO Books (Title, Author, CopiesAvailable)
VALUES ('Bad Book', 'Author X', -5);


-- (6)
  -- (a)
SELECT m.MemberID, m.Name, m.Email
FROM Members m
WHERE NOT EXISTS (
    SELECT 1 FROM IssuedBooks i WHERE i.MemberID = m.MemberID
);

  -- (b)
SELECT *
FROM Books
WHERE CopiesAvailable = (SELECT MAX(CopiesAvailable) FROM Books);

  -- (c)
SELECT MemberID, Name, issue_count FROM (
    SELECT m.MemberID, m.Name, COUNT(i.IssueID) AS issue_count
    FROM Members m
    JOIN IssuedBooks i ON m.MemberID = i.MemberID
    GROUP BY m.MemberID, m.Name
    ORDER BY issue_count DESC
)
WHERE ROWNUM = 1;

  -- (d)
SELECT b.BookID, b.Title, b.Author
FROM Books b
WHERE NOT EXISTS (
    SELECT 1 FROM IssuedBooks i WHERE i.BookID = b.BookID
);

  -- (e)
SELECT DISTINCT m.MemberID, m.Name, m.Email, i.IssueDate, i.BookID
FROM Members m
JOIN IssuedBooks i ON m.MemberID = i.MemberID
WHERE i.ReturnDate IS NULL
  AND i.IssueDate < (SYSDATE - 30);